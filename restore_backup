#!/bin/bash

# Function to find the most recent backup by name
find_most_recent_backup() {
    search_name=$1
    backup_types=("Daily" "Weekly" "Monthly" "DateSpecific")

    most_recent_backup=""
    most_recent_time=0

    for backup_type in "${backup_types[@]}"; do
        backup_dir="/opt/Backups/$backup_type"
        if [ -d "$backup_dir" ]; then
            matches=($(ls "$backup_dir" | grep "$search_name"))
            for match in "${matches[@]}"; do
                backup_time=$(stat -c %Y "$backup_dir/$match")
                if [ "$backup_time" -gt "$most_recent_time" ]; then
                    most_recent_time=$backup_time
                    most_recent_backup="$backup_type/$match"
                fi
            done
        fi
    done

    echo "$most_recent_backup"
}

# Function to restore a database
restore_database() {
    database_name=$1

    most_recent_backup=$(find_most_recent_backup)

    # Check if a backup was found
    if [ -n "$most_recent_backup" ]; then
        confirm_database_restoration "$most_recent_backup" || exit 0

        # Remove existing database (assuming the database is a directory)
        rm -rf "/Databases/$database_name"

        # Create a new directory within "/Databases/" for the restored backup
        mkdir -p "/Databases/$database_name"

        # Copy the most recent backup to the new directory
        cp -r "/opt/Backups/$most_recent_backup" "/Databases/$database_name/"
        echo "Database '$database_name' restored successfully from the most recent backup ('$most_recent_backup')."
        # add log
        /bin/bash "./create_log" "restore_backup" "$database_name" "$USER"
    else
        echo "No backup found for '$database_name'."
    fi
}

# Function to confirm database restoration
confirm_database_restoration() {
    selected_backup=$1
    read -p "Are you sure you want to restore the database '$database_name' from the most recent backup ('$selected_backup')? Restoring will overwrite any existing version. (y/n): " choice
    case "$choice" in
        y|Y)
            return 0  # User confirmed
            ;;
        n|N)
            return 1  # User canceled
            ;;
        *)
            echo "Invalid choice. Please enter 'y' for yes or 'n' for no."
            confirm_database_restoration "$selected_backup"  # Repeat until a valid choice is made
            ;;
    esac
}

# Main script
read -p "Enter the name of the database you want to restore: " database_name

# Restore the most recent backup for the specified database
restore_database "$database_name"
